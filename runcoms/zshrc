#
# Executes commands at the start of an interactive session.
#
# Original authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#
# Modified by:
#   Sean McDaniel <sean.m.mcdaniel@gmail.com>


# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi


# VARIABLES
# ---------

# See .zprofile for PATH additions.
#
# PYTHONPATH should not be set. Modify ipython startup files instead (e.g.
# ~/.ipython/profile_default/startup/00-startup.py)

# Don't add certain commands to history
HISTORY_IGNORE="(ls|ls -a|ll|ll -a|l|l -a|pwd|exit|clear|cd|cd ..|cd ../..)"

# Point 'mvim' to the current Homebrew vim
# export VIM_APP_DIR="usr/local/Cellar/macvim/HEAD-ed3fd67/" 


# SETOPTS
# -------

# Certain setopt values are set in prezto modules and don't need to be set here.

setopt AUTO_CD              # Allows 'dir' instead of 'cd dir'
setopt MULTIOS              # Pipe to multiple outputs
setopt AUTO_NAME_DIRS       # Allow for named dirs that can replace paths

setopt GLOB_COMPLETE        # Do not insert all expansion possibilities. Cycle
                            # through them like MENU_COMPLETE.

setopt AUTO_PUSHD           # CD = PUSHD
setopt PUSHD_MINUS          # Interchange +/- when used to specify a number on the stack
setopt PUSHD_TO_HOME        # Blank pushd goes to home
setopt PUSHD_IGNORE_DUPS    # Ignore multiple dirs on stack
setopt PUSHD_SILENT         # No PUSHD error messages

setopt RM_STAR_WAIT         # 10 sec wait for 'rm *' !!!
setopt IGNORE_EOF           # Do not exit on end-of-file

# KEYBINDINGS
# --------

# Common keybindings unset in python
bindkey '^A' beginning-of-line
bindkey '^E' end-of-line
bindkey '^K' kill-line
bindkey '^R' history-incremental-search-backward
bindkey '^S' history-incremental-search-forward
bindkey '^_' undo

# Incremental search using "/" and "?"
#bindkey -M vicmd "/" history-incremental-search-backward
#bindkey -M vicmd "?" history-incremental-search-forward

# VARIABLES
# ---------

if [ "$HOST" =  MM241584-PC ]; then
    export CURL_CA_BUNDLE=~/.cert/MITRE-chain.pem
    export SSL_CERT_FILE=~/.cert/MITRE-chain.pem
fi


# MITRE PROXY
# -----------

if [ "$HOST" =  MM241584-PC ]; then
    export http_proxy=http://gatekeeper-w.mitre.org:80/
    export HTTP_PROXY=$http_proxy

    export https_proxy=http://gatekeeper-w.mitre.org:80/
    export HTTPS_PROXY=$https_proxy

    export no_proxy=localhost,127.0.0.1,.mitre.org
    export NO_PROXY=$no_proxy

    export ALL_PROXY=$http_proxy:80
fi


# ALIASES
# -------

# Additional aliases have been defined in the prezto module (e.g. the Utility
# module). See ~/.zprezto/modules/utility/README for details.

# 'zprofile' sets a few defaults for 'ls' commands
#   -C: Mult-column output (default for terminals; therefore not included)
#   -G: colorized output
#   -F: slash after dir, asterisk after an exutible, etc.
#   -l: long format
#   -h: unit suffixes for file sizes, i.e. human readible format
alias ls='ls -GF'
alias l='ls -GF'
alias ll='ls -GFlh'


# Directory aliases (e.g. 'cd docs = cd ~/Documents/')
 
# NOTE: zprezto module 'osx' defines 'cdf' as 'cd into the current Finder
# directory'
 
hash -d docs=~/Documents/

if [[ "$HOST" = MM241584-PC ]]; then

    # Git Personal
    hash -d notes=~/Documents/Git\ Projects/git-personal/notes/
    hash -d deorcost=~/Documents/Git\ Projects/git-personal/deorcost-rpg/
    hash -d grav=~/Documents/Git\ Projects/git-personal/ws-seanmmcdaniel-grav/
    hash -d metrics=~/Documents/Git\ Projects/git-personal/metrics/

    # Git Work
    hash -d git=~/Documents/Git\ Projects/
    hash -d pya=~/Documents/Git\ Projects/git-work/py-analysis-sm/
    hash -d alex=~/Documents/Git\ Projects/git-work/alexanalysis/

    # Projects Dirs
    hash -d proj=~/Documents/Projects/
    hash -d dtra=~/Documents/Projects/DTRA\ \(2017-07\)/
    hash -d hen=~/Documents/Projects/AMON-HEN\ \(2017-12\)/
    hash -d polar=~/Documents/Projects/Polarization\ \(2018-05\)/
    hash -d vta=~/Documents/Projects/HSARPA\ \(2018-05\)/
    hash -d wiser=~/Documents/Projects/WISER\ \(2013-10\)/

fi

# Mac Desktop
if [[ "$HOST" = SoniaMahwarsMBP.home ]]; then
    hash -d notes=~/Documents/github-repos/personal/notes/
    hash -d grav=~/Documents/github-repos/personal/ws-seanmmcdaniel-grav/pages/
    hash -d deorcost=~/Documents/github-repos/personal/deorcost-rpg/
    hash -d metrics=~/Documents/github-repos/personal/metrics/
fi


# Git aliases

# Aliases provided by the prezto git module have been disabled (see
# ~/.zpreztorc). A narrow selection of them have been manually included below
# (trying to prevent command pollution). See ~/.zprezto/modules/git/alias.zsh
# for reference. Will add more as necessary.

# Branch (b)
alias gb='git branch'

# Commit (c)
alias gcm='git commit --message'    # git commit message
alias gco='git checkout'

# Fetch (f)
alias gf='git fetch'
alias gfm='git pull'                # Pull = fetch + merge

# Index (i)
alias gia='git add'                 # git index add

# Push (p)
alias gp='git push'

# Working copy (w)
alias gwd='git diff'                # git working-directory diff
# git working-directory status
alias gws='git status --ignore-submodules=${_git_status_ignore_submodules}' 


# Misc. aliases
 
# Executable script 'mvim' launches application MacVim. It must be installed
# for the below aliases to work. (expected directory: '/usr/local/bin').
# Instruction are included as part of the standard MacVim download.
# alias vim='mvim'
alias gvim='mvim'

alias brun='brew services run'
alias bstart='brew services start'
alias bstop='brew services stop'
alias bstatus='brew services list'



# FUNCTIONS
# ---------

# ZSH modifiers are used
#   - t: pathname tail, i.e. basename
#   - r: remove filename extension
#   - e: the suffix (file extension)


# Convert a Markdown (*.md) file to a Microsoft Word (*.docx) file using pandoc

# Pandoc flags:
#   - s / --standalone  :   Produce output with an appropriate header and footer.
 
function md2docx {
    if test ${1:e}=="md"; then
        echo "Executing: 'pandoc -s ${1:t} -o ${1:t:r}.docx'"
        pandoc -s ${1} -o ${1:r}.docx
    else
        echo "FAILURE: Markdown file with extension *.md required"
    fi
}

# Convert a Markdown (*.md) file to an HTML file using pandoc. Use a CSS style
# sheet.
#
# Pandoc flags:
#   -s: Standalone document with a proper header and footer. Required for
#           proper HTML rendering.
#   --css "path/to/stylesheet.css": Reference style sheet
#   --katex: Math typesetting (see https://github.com/Khan/KaTeX)

# Function 1: simple conversion with style sheet and table of contents
function md2html {
    echo "Pandoc: Creating '${1:t:r}.html' from '${1:t}'"
    pandoc -s --toc --katex --css ~/.css/pandoc.css -o ${1:r}.html ${1} 
}

# Function 2: conversion (as above) + place file in html directory
function md2html2 {
    echo "Pandoc: Creating 'html/${1:t:r}.html' from '${1:t}'"
    pandoc -s --toc --katex --css ~/.css/pandoc.css -o html/${1:r}.html ${1} 
}

# Update all homebrew (/usr/local) python packages
function p3update {
    echo "Updating Python 3x packages"
    pip3 freeze - local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U
    echo "Process complete"
}

