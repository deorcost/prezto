# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

#
# Executes commands at the start of an interactive session.
#
# Original authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#
# Modified by:
#   Sean McDaniel <sean.m.mcdaniel@gmail.com>


# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi


# VARIABLES
# ---------

# See .zprofile for PATH additions.
#
# PYTHONPATH should not be set. Modify ipython startup files instead (e.g.
# ~/.ipython/profile_default/startup/00-startup.py)

# Don't add certain commands to history
HISTORY_IGNORE="(ls|ls -a|ll|ll -a|l|l -a|pwd|exit|clear|cd|cd ..|cd ../..)"

if [[ "$HOST" = MM241584-PC ]]; then
    export SSL_CERT_FILE=~/.cert/MITRE-chain.txt
fi

# SETOPTS
# -------

# Certain setopt values are set in prezto modules and don't need to be set here.

setopt AUTO_CD              # Allows 'dir' instead of 'cd dir'
setopt MULTIOS              # Pipe to multiple outputs
setopt AUTO_NAME_DIRS       # Allow for named dirs that can replace paths

setopt GLOB_COMPLETE        # Do not insert all expansion possibilities. Cycle
                            # through them like MENU_COMPLETE.

setopt AUTO_PUSHD           # CD = PUSHD
setopt PUSHD_MINUS          # Interchange +/- when used to specify a number on the stack
setopt PUSHD_TO_HOME        # Blank pushd goes to home
setopt PUSHD_IGNORE_DUPS    # Ignore multiple dirs on stack
setopt PUSHD_SILENT         # No PUSHD error messages

setopt RM_STAR_WAIT         # 10 sec wait for 'rm *' !!!
setopt IGNORE_EOF           # Do not exit on end-of-file

# KEYBINDINGS
# --------

# Common keybindings unset in python
bindkey '^A' beginning-of-line
bindkey '^E' end-of-line
bindkey '^K' kill-line
bindkey '^R' history-incremental-search-backward
bindkey '^S' history-incremental-search-forward
bindkey '^_' undo

# Incremental search using "/" and "?"
#bindkey -M vicmd "/" history-incremental-search-backward
#bindkey -M vicmd "?" history-incremental-search-forward

# VARIABLES
# ---------

# Neovim true color and cursor shape support
export NVIM_TUI_ENABLE_TRUE_COLOR=1
export NVIM_TUI_ENABLE_CURSOR_SHAPE=1


# ALIASES
# -------

# Additional aliases have been defined in the prezto module (e.g. the Utility
# module). See ~/.zprezto/modules/utility/README for details.

# 'zprofile' sets a few defaults for 'ls' commands
#   -C: Mult-column output (default for terminals; therefore not included)
#   -G: colorized output
#   -F: slash after dir, asterisk after an exutible, etc.
#   -l: long format
#   -h: unit suffixes for file sizes, i.e. human readible format
alias ls='ls -GF'
alias l='ls -GF'
alias ll='ls -GFlh'


# Directory aliases (e.g. 'cd docs = cd ~/Documents/')
 
# NOTE: zprezto module 'osx' defines 'cdf' as 'cd into the current Finder
# directory'
 
hash -d docs=~/Documents/

if [[ "$HOST" = MM241584-PC ]]; then

    # Git Personal
    hash -d deorcost=~/Documents/Git\ Projects/git-personal/deorcost-rpg/
    hash -d grav=~/Documents/Git\ Projects/git-personal/ws-seanmmcdaniel-grav/
    hash -d metrics=~/Documents/Git\ Projects/git-personal/metrics/

    hash -d notes=~/Documents/Git\ Projects/git-personal/notes/
    hash -d js=~/Documents/Git\ Projects/git-personal/notes/job-search/
    hash -d pd=~/Documents/Git\ Projects/git-personal/notes/personal-development/
    hash -d cv=~/Documents/Git\ Projects/git-personal/notes/computerverse/

    hash -d py=~/Documents/Git\ Projects/git-personal/py-reference/
    hash -d rr=~/Documents/Git\ Projects/git-personal/r-reference/

    # Git Work
    hash -d hfc=~/Documents/Git\ Projects/git-work/hfc/
    hash -d appeals=~/Documents/Git\ Projects/git-work/vba_appeals_task/

    # Projects Dirs
    hash -d proj=~/Documents/Projects/
    hash -d forecast=~/Documents/Projects/Forecasting\ \(2019-02\)/
    hash -d vba=~/Documents/Projects/VBA\ \(2019-03\)/

fi

# Mac Desktop
if [[ "$HOST" = SoniaMahwarsMBP.home ]]; then
    hash -d deorcost=~/Documents/github-repos/personal/deorcost-rpg/
    hash -d grav=~/Documents/github-repos/personal/ws-seanmmcdaniel-grav/pages/
    hash -d metrics=~/Documents/github-repos/personal/metrics/

    hash -d notes=~/Documents/github-repos/personal/notes/
    hash -d js=~/Documents/github-repos/personal/notes/job-search/
    hash -d pd=~/Documents/github-repos/personal/notes/personal-development/
    hash -d cv=~/Documents/github-repos/personal/notes/computerverse/

    hash -d py=~/Documents/github-repos/personal/py-reference/
    hash -d rr=~/Documents/github-repos/personal/r-reference/
fi


# Git aliases

# Aliases provided by the prezto git module have been disabled (see
# ~/.zpreztorc). A narrow selection of them have been manually included below
# (trying to prevent command pollution). See ~/.zprezto/modules/git/alias.zsh
# for reference. Will add more as necessary.

# Branch (b)
alias gb='git branch'

# Commit (c)
alias gcm='git commit --message'    # git commit message
alias gco='git checkout'

# Fetch (f)
alias gf='git fetch'
alias gfm='git pull'                # Pull = fetch + merge
alias gfr='git pull --rebase'

# Index (i)
alias gia='git add'                 # git index add

# Push (p)
alias gp='git push'

# Working copy (w)
alias gwd='git diff'                # git working-directory diff
# git working-directory status
alias gws='git status --ignore-submodules=${_git_status_ignore_submodules}' 

# Git stash (s)
alias gs='git stash'
alias gsl='git stash list'
alias gsp='git stash pop'

# Misc. aliases
 
# Executable script 'mvim' launches application MacVim. It must be installed
# for the below aliases to work. (expected directory: '/usr/local/bin').
# Instruction are included as part of the standard MacVim download.
# alias vim='mvim'
alias gvim='mvim'

alias brun='brew services run'
alias bstart='brew services start'
alias bstop='brew services stop'
alias bstatus='brew services list'



# FUNCTIONS
# ---------

# ZSH modifiers are used
#   - t: pathname tail, i.e. basename
#   - r: remove filename extension
#   - e: the suffix (file extension)


# PANDOC FUNCTIONS
# 
#   1. md2docx:  Convert Markdown -> Word
#   2. md2html:  Convert Markdown -> HTML
#   3. md2html2: Convert Markdown -> HTML. HTML files go in seperate folder.
#   3. md2pdf:   Convert Markdown -> PDF
#
# The following PANDOC flags are in the various functions
#
#   - s / --standalone
#       Produce output with an appropriate header and footer
#   --toc
#       Generate a table of contents
#   --css "path/to/stylesheet.css"
#       Use CSS stylesheet 'stylesheet.css' to format HTML documents
#   --katex
#       Fast math typesetting engine for HTML (see https://github.com/Khan/KaTeX)
#   --filter pandoc-citeproc
#       Add citation and bibliography support. Requires installation of
#       'pandoc-citeproc' (homebrew)
#   --filter pandoc-crossref
#       Add figure, equation, and table cross-reference functionality. Requires
#       installation of 'pandoc-crossref' (homebrew)
#   --highlight-style kate
#       Use the HTML code formatting highlight style 'kate'


# Markdown -> Word
function md2docx {
    if test ${1:e}=="md"; then
        echo "Executing: 'pandoc -s ${1:t} -o ${1:t:r}.docx'"
        pandoc -s ${1} -o ${1:r}.docx
    else
        echo "FAILURE: Markdown file with extension *.md required"
    fi
}

# Markdown -> HTML
function md2html {
    echo "Pandoc: Creating '${1:t:r}.html' from '${1:t}'"
    pandoc -s --toc --katex \
        --filter pandoc-crossref \
        --filter pandoc-citeproc \
        --highlight-style kate \
        --css ~/.css/pandoc.css \
        -o ${1:r}.html ${1} 
}

# Markdown -> HTML
# Place the output HTML document in a seperate `html/` folder. This folder is
# assumed to exist.
function md2html2 {
    echo "Pandoc: Creating 'html/${1:t:r}.html' from '${1:t}'"
    pandoc -s --toc --katex \
        --filter pandoc-crossref \
        --filter pandoc-citeproc \
        --highlight-style kate \
        --css ~/.css/pandoc.css \
        -o html/${1:r}.html ${1} 
}

# Markdown (Common Mark) -> Markdown (PHP Extra)
function md2md {
    echo "Pandoc: Creating '${1:t:r}.md' from '${1:t}'"
    pandoc --atx-headers \
        --filter pandoc-crossref \
        --filter pandoc-citeproc \
        --from markdown --to markdown_phpextra-link_attributes \
        -o ${1:r}_phpextra.md ${1} 
}


# PYTHON FUNCTIONS

# Update all homebrew (/usr/local) python packages
function p3update {
    echo "Updating Python 3x packages"
    pip3 freeze - local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U
    echo "Process complete"
}

# Set the Anaconda environment via a function
# #
# This is done manually instead of automatically so that the conda installation
# binaries don't conflict with installation of other applications (e.g. certain
# R packages).
function setcondaenv {

# added by Anaconda3 2019.10 installer
# >>> conda init >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$(CONDA_REPORT_ERRORS=false '/Users/smcdaniel/opt/anaconda3/bin/conda' shell.bash hook 2> /dev/null)"
if [ $? -eq 0 ]; then
    \eval "$__conda_setup"
else
    if [ -f "/Users/smcdaniel/opt/anaconda3/etc/profile.d/conda.sh" ]; then
        CONDA_CHANGEPS1=false conda activate base
    else
        export PATH="/Users/smcdaniel/opt/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda init <<<

}

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
